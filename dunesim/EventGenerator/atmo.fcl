#include "services_dune.fcl"
#include "nuance.fcl"
#include "filters.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "mccheatermodules.fcl"
#include "caldata_dune.fcl"
##include "cluster_dune.fcl"

#
# This fcl file begins by reading up a txt file of HEPEvt events (in/atmo00001.txt). 
# It then runs a series of producers and one analyzer. It runs the evts through a 
# filter looking for primary K+'s and outputs those events to one file, while 
# writing every single event to another file.
#

process_name: Atmo

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "ndk_hist_atmo.root" }
  TimeTracker:       {}
  MemoryTracker:         { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
                @table::dunefd_simulation_services
}

services.LArFFT.FFTOption: "" 
services.Geometry.GDML: "dune4apa36deg.gdml"
services.Geometry.ROOT: "dune4apa36deg.gdml"

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:  4000
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::argoneut_nuance
   largeant:  @local::dunefd_largeant	  
   daq:       @local::dunefd_simwire       
   backtrack: @local::standard_backtrackerloader
   caldata:   @local::dunefd_calwire
   gaushit:   @local::dunefd_gaushitfinder
   hitcheat:  @local::dunefd_hitcheater
   apahit:    @local::dunefd_apahitfinder
#   fuzzy:     @local::dunefd_fuzzycluster
    rns: { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   largana:   @local::microboone_largeantana
 } 

 filters : 
{
    selectMode1: {
     module_type: FilterPrimaryPDG
     GeantModuleLabel: "largeant"
     PrimaryParticles: [ 321 ] # find one of these and it's satisfied. 321==K+
    }
}

 #define the producer and filter modules for this path, order matters, 

 #simulate: [ generator, largeant, daq, backtrack, caldata, gaushit, hitcheat, apahit, rns ] 

  mode0: [ generator, largeant, daq, backtrack, caldata, gaushit, hitcheat, apahit, rns ] 
  mode1: [ generator, largeant, daq, backtrack, caldata, gaushit, hitcheat, apahit, rns, selectMode1 ] # 
 
 larana: [ largana ] 

 #define the output stream, there could be more than one if using filters 
 #stream1:  [ out1 ]
 stream:  [ out1, out2 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
# trigger_paths: [simulate] 
 trigger_paths: [ mode0, mode1] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
# end_paths:     [larana, stream1] 
 end_paths:     [larana, stream] 
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "atmo.00003.root" #default file name, can override from command line with -o or --output
#   SelectEvents: { SelectEvents: [ mode0 ] }
 }
  out2: {
   module_type: RootOutput
   fileName: "atmo.00003.strange.root"
   SelectEvents: { SelectEvents: [ mode1 ] }
  }

}

physics.producers.generator.module_type: "NDKGen"
physics.producers.generator.NdkFile: "/dune/app/users/echurch/lgm/in/atmo.00001.txt"
physics.producers.generator.fseed: 314159
#physics.producers.largeant.DumpParticleList: true

physics.producers.apahit.DisambigAlg.UseEndP: false
physics.producers.apahit.DisambigAlg.CompareViews: false
