#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules_dune.fcl"


process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_dune.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
                @table::dunefd_simulation_services
}
services.PhotonVisibilityService: @local::standard_photonvisibilityservice_par
#services.OpDigiProperties:        @local::microboone_opdigiproperties

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::dunefd_singlep	  
   largeant:  @local::dunefd_largeant	  
   daq:       @local::dunefd_simwire  
   #backtrack: @local::standard_backtrackerloader
   #opdigi:    @local::microboone_opdigi
 }

 analyzers:
 {
   largana:   @local::dunefd_largeantana
   pmtresponse: @local::dunefd_simphotoncounter
   #opdigiana: @local::microboone_opdigiana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, daq] 
 analyzeIt:  [ largana, pmtresponse]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_dune.root" #default file name, can override from command line with -o or --output
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
services.LArPropertiesService.ScintYield: 24000

# enable optical physics in LArG4
services.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "FastOptical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
services.LArPropertiesService.EnableCerenkovLight: false



physics.producers.generator.SigmaThetaXZ: [ 0 ]
physics.producers.generator.SigmaThetaYZ: [ 0 ]

physics.producers.generator.X0: [ -500.0 ]
physics.producers.generator.Z0: [ 50.0 ]
physics.producers.generator.P0: [ 1.5 ]
