# detsimmodules_dune.fcl
#
#
# David Adams
# April 2016
#
# This FCL prolog file holds a minimal default configuration for the
# DetSim module and configuration options for the services used by that
# module.
#
# See dunetpc/fcl/dune35t/detsim/standard_detsim_dune35t for top-level
# FCL that uses this configuration.

#include "detsimmodules.fcl"

BEGIN_PROLOG

#***********************************************************************

# DetSim module

dune_detsim: {
  module_type:       "SimWireDUNE"
  SimChannelLabel:   "largeant"
  NoiseOn:           false
  PedestalOn:        false
  DistortOn:         false
  SuppressOn:        false
  KeepEmptyChannels: false
  AdcSimulator:      "adcsim_ideal"
}

#***********************************************************************

# SimChannelExtractService converts GEANT output to TPC signals.

# Simple single-phase extractor.
scxgeneric: {
  service_provider: GenericSimChannelExtractService
}

# Signal extractor service for dune dual-phase detector
scxdp: {
  service_provider: DPhaseSimChannelExtractService
  DPGainPerView: 10.0
}

# Single-phase extractor with special handling of signal near and beyond
# TPC active boundaries.
scx35t: {
  service_provider: Dune35tSimChannelExtractService
  FractHorizGapUCollect: [ 0.1, 0.0 ]
  FractHorizGapUMiss: [ 0.8, 0.0 ]
  FractHorizGapVCollect: [ 0.1, 0.0 ]
  FractHorizGapVMiss: [ 0.8, 0.0 ]
  FractHorizGapZMiss: [ 0.8, 0.0 ]
  FractUUCollect: [ 0.5, 0.0 ]
  FractUUMiss: [ 0.2, 0.0 ]
  FractUVCollect: [ 0.1, 0.0 ]
  FractUVMiss: [ 0.2, 0.0 ]
  FractVUCollect: [ 0.5, 0.0 ]
  FractVUMiss: [ 0.2, 0.0 ]
  FractVVCollect: [ 0.1, 0.0 ]
  FractVVMiss: [ 0.2, 0.0 ]
  FractVertGapUCollect: [ 0.1, 0.0 ]
  FractVertGapUMiss: [ 0.8, 0.0 ]
  FractVertGapVCollect: [ 0.1, 0.0 ]
  FractVertGapVMiss: [ 0.8, 0.0 ]
  FractVertGapZMiss: [ 0.8, 0.0 ]
  FractZUMiss: [ 0.2, 0.0 ]
  FractZVMiss: [ 0.2, 0.0 ]
}

#***********************************************************************

# ChannelNoiseService adds noise to channel-tick bins.

# Option 1 from the old DetSim module.
chnoiseold: {
  service_provider: ExponentialChannelNoiseService
  NoiseNormU: 3.16
  NoiseNormV: 3.16
  NoiseNormZ: 3.16
  NoiseWidthU: 2000
  NoiseWidthV: 2000
  NoiseWidthZ: 2000
  LowCutoffU: 7.5
  LowCutoffV: 7.5
  LowCutoffZ: 7.5
  WhiteNoiseU: 0.0
  WhiteNoiseV: 0.0
  WhiteNoiseZ: 0.0
  NoiseArrayPoints: 1000
  OldNoiseIndex: true
}

# Option 2 from the old DetSim module.
chnoisewhite: {
  service_provider: WhiteChannelNoiseService
}

# Tune from October 2016.
# See D. Adams talk at the 26oct 35t sim/reco meeting.
# Option 1 from the old DetSim module.
chnoise35t: {
  service_provider: ExponentialChannelNoiseService
  NoiseNormU:   30.0
  NoiseNormV:   30.0
  NoiseNormZ:   15.0
  NoiseWidthU: 150.0
  NoiseWidthV: 150.0
  NoiseWidthZ: 150.0
  LowCutoffU:    0.0
  LowCutoffV:    0.0
  LowCutoffZ:    0.0
  WhiteNoiseU:   1.6
  WhiteNoiseV:   1.6
  WhiteNoiseZ:   1.6
  NoiseArrayPoints: 1000
  OldNoiseIndex: false
}

#***********************************************************************

# PedestalAdditionService adds pedestals to signals.

# Takes pedestal mean and RMS and from the DetPedestalService provider.
# Incoherent noise is added with Gaussian sigma = NoiseScale*RMS.
padprovided: {
  service_provider: ProvidedPedestalAdditionService
  NoiseScale: 0.0
}

#***********************************************************************

# AdcDistortService adds distortions to the digitized signals.

# Add 35-ton stuck bits.
stuckbits: {
  service_provider: StuckBitAdcDistortionService
  StuckBitsOverflowProbHistoName: "pCorrFracOverflowVsInputLsbCell"
  StuckBitsProbabilitiesFname: "ADCStuckCodeProbabilities35t/output_produceDcScanSummaryPlots_20150827_coldTest_0p1to1p4_step0p0010.root"
  StuckBitsUnderflowProbHistoName: "pCorrFracUnderflowVsInputLsbCell"
}

#***********************************************************************

# AdcSuppressService indicates which channel-tick bins should be
# ignored (i.e. zero-suppressed).

# No suppression.
zsnone: {
  service_provider: FixedZeroSuppressService
}

# Simple window supression. Same as the old module.
zslegacy: {
  service_provider: Legacy35tZeroSuppressService
  AdcThreshold: 10.0
  TickRange: 10
  MinTickGap: 2
  SuppressStickyBits: false
}

# Algorithm developed for use with the 35-ton detector with original
# (low) thresholds.
zsonline: {
  service_provider: Dune35tZeroSuppressService
  NS:  5
  NL: 15
  ND:  5
  NT:  3
  TS:  3
  TL:  7
  TD:  5
}

# Algorithm developed for use with the 35-ton detector with high
# thresholds.
zsonline_nhi: {
  service_provider: Dune35tZeroSuppressService
  NS:  5
  NL: 15
  ND:  5
  NT:  3
  TS:  6
  TL: 10
  TD: 10
}

#***********************************************************************

# AdcCompressService applies supression and converts digititzed signals
# to the final raw data format.

# Replaces suppressed bins with value Zero.
# Use this to effectively skip compression.
cmpreplace: {
  service_provider: ReplaceCompressService
  Zero: 0
}

# Larsoft block formatting. This removes the suppressed bins.
cmpblock: {
  service_provider: "LarsoftHuffmanCompressService"
  UseBlock:         "true"
  UseHuffman:       "false"
}

# Larsoft block formatting with Larsoft Huffman compression.
cmphuffman: {
  service_provider: "LarsoftHuffmanCompressService"
  UseBlock:         "true"
  UseHuffman:       "true"
}

#***********************************************************************
# Below are configurations for the old (and soon to be obsolete) DetSim
# modules. These can be removed when the old modules
# SimWireDUNE35t_module.cc and SimWireDUNE10kt_module.cc are dropped.
#***********************************************************************

dunefd_simwire:  
{ 
 module_type:        "SimWireDUNE10kt"
 DriftEModuleLabel:  "largeant"
 NoiseFactU:          0.0349     # Noise Scale for U plane. Reset by DLA 26apr16.
 NoiseWidthU:         2000         #Exponential Noise width (kHz) for U plane
 LowCutoffU:          7.5          #Low frequency filter cutoff (kHz) for U plane
 NoiseFactV:          0.0349     #Noise Scale for V plane, should produce RMS of 2.5 ADC counts. Reset by DLA 26apr16.
 NoiseWidthV:         2000         #Exponential Noise width (kHz) for V plane, should produce RMS of 2.5 ADC counts
 LowCutoffV:          7.5          #Low frequency filter cutoff (kHz) for V plane
 NoiseFactZ:          0.0349     #Noise Scale for Z plane, should produce RMS of 2.5 ADC counts. Reset by DLA 26apr16.
 NoiseWidthZ:         2000         #Exponential Noise width (kHz) for Z plane
 LowCutoffZ:          7.5          #Low frequency filter cutoff (kHz) for Z plane
 CompressionType:    "ZeroSuppression"       #could also be none
 #CompressionType:    ""       #could also be none	
 ZeroThreshold:       10        #Threshold for zero suppression
 NearestNeighbor:     10        #Maximum distance between hits above threshold before they are separated into different blocks
 NeighboringChannels: 0        #Number of neighboring channels on either side allowed to influence zero suppression
 NoiseArrayPoints:    1000     #number of points in noise array
 NoiseOn:             1        #1 for noise on, 0 for noise off
 NoiseModel:          1        #1 for original model, 2 for a model similar to uBooNE

 CollectionPed:       400         #ADC baseline for coll plane
 CollectionPedRMS:    0        #ADC baseline RMS for coll plane
 InductionPed:        2048        #ADC baseline for ind plane
 InductionPedRMS:     0        #ADC baseline RMS for ind plane

 CollectionCalibPed:  400         #Assumed measured value for coll plane pedestal
 CollectionCalibPed:  0         #Assumed measured value for coll plane pedestal RMS
 InductionCalibPed:   2048        #Assumed measured value for ind plane pedestal
 InductionCalibPed:   0        #Assumed measured value for ind plane pedestal RMS
 
 PedestalOn:          true     #add pedestal value to ADC vector

 SimCombs:           false
 SaveEmptyChannel:   false      #if channel's ADC vector is entirely full of zeros, save it in RawDigit collection (true) or discard (false)
 SimStuckBits:       false        #simulate stuck bits

 StuckBitsProbabilitiesFname:     "ADCStuckCodeProbabilities35t/output_produceDcScanSummaryPlots_20150827_coldTest_0p1to1p4_step0p0010.root"
 StuckBitsOverflowProbHistoName:     "pCorrFracOverflowVsInputLsbCell"
 StuckBitsUnderflowProbHistoName:     "pCorrFracUnderflowVsInputLsbCell"

# random initial guesses for charge inefficiency and wrong-type collection on the induction-plane wires
# the second number is for the gap with the deflector

 FractUUCollect:        [ 0.5, 0 ]        # fraction of charge that collects on U (non-transparency) when charge drifts over the comb holding U wires
 FractUVCollect:        [ 0.1, 0 ]        # fraction of charge that collects on U (non-transparency) when charge drifts over the comb holding V wires
 FractVUCollect:        [ 0.5, 0 ]        # fraction of charge that collects on V (non-transparency) when charge drifts over the comb holding U wires
 FractVVCollect:        [ 0.1, 0 ]        # fraction of charge that collects on V (non-transparency) when charge drifts over the comb holding V wires
 FractUUMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on U when charge drifts over the comb holding U
 FractUVMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on U when charge drifts over the comb holding V
 FractVUMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on V when charge drifts over the comb holding U
 FractVVMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on V when charge drifts over the comb holding V
 FractZUMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on Z (collection) when charge drifts over the comb holding U
 FractZVMiss:           [ 0.2, 0 ]        # fraction of charge that gets missed on Z (collection) when charge drifts over the comb holding V
 FractHorizGapUMiss:    [ 0.8, 0 ]        # fraction of charge in the horizontal gap that is missing on U
 FractVertGapUMiss:     [ 0.8, 0 ]        # fraction of charge in the horizontal gaps that is missing on U
 FractHorizGapVMiss:    [ 0.8, 0 ]        # fraction of charge in the horizontal gap that is missing on V
 FractVertGapVMiss:     [ 0.8, 0 ]        # fraction of charge in the horizontal gaps that is missing on V
 FractHorizGapZMiss:    [ 0.8, 0 ]        # fraction of charge in the horizontal gap that is missing on Z
 FractVertGapZMiss:     [ 0.8, 0 ]        # fraction of charge in the horizontal gaps that is missing on Z
 FractHorizGapUCollect: [ 0.1, 0 ]        # fraction of charge in the horizontal gap that collects on U
 FractHorizGapVCollect: [ 0.1, 0 ]        # fraction of charge in the horizontal gap that collects on V
 FractVertGapUCollect:  [ 0.1, 0 ]        # fraction of charge in the vertical gap that collects on U
 FractVertGapVCollect:  [ 0.1, 0 ]        # fraction of charge in the vertical gap that collects on V
}			     

dunefd_simwireana:            @local::standard_simwireana
dunefd_wienerfilterana:       @local::standard_wienerfilterana


# For now treat the other dune geometries like FD

dune35t_simwire:		@local::dunefd_simwire
dune35t_simwire.PedestalOn:     true        #add pedestal value to ADC vector
dune35t_simwire.CollectionPed:  500         #ADC baseline for coll plane
dune35t_simwire.CollectionPedRMS:    0.0    #ADC baseline RMS for coll plane
dune35t_simwire.InductionPed:   1800        #ADC baseline for ind plane
dune35t_simwire.InductionPedRMS:    0.0    #ADC baseline RMS for ind plane
dune35t_simwire.CollectionCalibPed:  500         #Assumed measured value for coll plane pedestal
dune35t_simwire.CollectionCalibPedRMS:  0.0     #Assumed measured value for coll plane pedestal RMS
dune35t_simwire.InductionCalibPed:   1800        #Assumed measured value for ind plane pedestal
dune35t_simwire.InductionCalibPedRMS:   0.0        #Assumed measured value for ind plane pedestal RMS
#dune35t_simwire.CompressionType:    "none"      #no data compression for noise test

dune35t_simwire.ZeroThreshold:  5
dune35t_simwire.NoiseModel:     1 
dune35t_simwire.NoiseWidthU:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseWidthV:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseWidthZ:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseFactU:   0.05  # Should produce RMS of 2.5 ADC counts
dune35t_simwire.NoiseFactV:   0.05  # Should produce RMS of 2.5 ADC counts
dune35t_simwire.NoiseFactZ:   0.05  # Should produce RMS of 2.5 ADC counts
#dune35t_simwire.NoiseFactU:   0.1  # Should produce RMS of 5 ADC counts
#dune35t_simwire.NoiseFactV:   0.1  # Should produce RMS of 5 ADC counts
#dune35t_simwire.NoiseFactZ:   0.1  # Should produce RMS of 5 ADC counts
dune35t_simwire.LowCutoffU:    7.5  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.LowCutoffV:    7.5  # If turn NoiseModel to 1 use these numbers..    
dune35t_simwire.LowCutoffZ:    7.5  # If turn NoiseModel to 1 use these numbers..    
dune35t_simwire.SimStuckBits:    false   # Simulate stuck bits
dune35t_simwireana:             @local::dunefd_simwireana
dune35t_wienerfilterana:        @local::dunefd_wienerfilterana
dune35t_simwire.module_type:    "SimWireDUNE35t"

dune35t_simcounter:
{
    module_type:           "SimCounter35t"
    LArGeantModuleLabel:   "largeant"
    MakeTree:              false
    BSUTriggerThreshold:   0.5 # MeV
    TSUTriggerThreshold:   0.25 # MeV
    TriggerEfficiency:     1.0
# below changed on Feb. 1 2016 to match data . . 
#    ClockSpeedCounter:     31.25 # MHz
    ClockSpeedCounter:     64.0 # MHz
    CombinedTimeDelay:     160 # ns. cable length delay + various electronics delays
}

END_PROLOG
