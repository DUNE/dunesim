#include "detsimmodules.fcl"

BEGIN_PROLOG

dunefd_simwire:  
{ 
 module_type:        "SimWireDUNE10kt"
 DriftEModuleLabel:  "largeant"
 NoiseFactU:          0.1       #Noise Scale for U plane
 NoiseWidthU:         2000         #Exponential Noise width (kHz) for U plane
 LowCutoffU:          7.5          #Low frequency filter cutoff (kHz) for U plane
 NoiseFactV:          0.1       #Noise Scale for V plane
 NoiseWidthV:         2000         #Exponential Noise width (kHz) for V plane
 LowCutoffV:          7.5          #Low frequency filter cutoff (kHz) for V plane
 NoiseFactZ:          0.1       #Noise Scale for Z plane
 NoiseWidthZ:         2000         #Exponential Noise width (kHz) for Z plane
 LowCutoffZ:          7.5          #Low frequency filter cutoff (kHz) for Z plane
 CompressionType:    "ZeroSuppression"       #could also be none
 #CompressionType:    ""       #could also be none	
 ZeroThreshold:       10        #Threshold for zero suppression
 NearestNeighbor:     10        #Maximum distance between hits above threshold before they are separated into different blocks
 NeighboringChannels: 0        #Number of neighboring channels on either side allowed to influence zero suppression
 NoiseArrayPoints:    1000     #number of points in noise array
 NoiseOn:             1        #1 for noise on, 0 for noise off
 NoiseModel:          1        #1 for original model, 2 for a model similar to uBooNE

 CollectionPed:       400         #ADC baseline for coll plane
 CollectionPedRMS:    0        #ADC baseline RMS for coll plane
 InductionPed:        2048        #ADC baseline for ind plane
 InductionPedRMS:     0        #ADC baseline RMS for ind plane

 CollectionCalibPed:  400         #Assumed measured value for coll plane pedestal
 CollectionCalibPed:  0         #Assumed measured value for coll plane pedestal RMS
 InductionCalibPed:   2048        #Assumed measured value for ind plane pedestal
 InductionCalibPed:   0        #Assumed measured value for ind plane pedestal RMS
 
 PedestalOn:          true     #add pedestal value to ADC vector

 SimCombs:           false
 SaveEmptyChannel:   false      #if channel's ADC vector is entirely full of zeros, save it in RawDigit collection (true) or discard (false)
 SimStuckBits:       false        #simulate stuck bits

 StuckBitsProbabilitiesFname:     "ADCStuckCodeProbabilities35t/output_produceDcScanSummaryPlots_20150827_coldTest_0p1to1p4_step0p0010.root"
 StuckBitsOverflowProbHistoName:     "pCorrFracOverflowVsInputLsbCell"
 StuckBitsUnderflowProbHistoName:     "pCorrFracUnderflowVsInputLsbCell"

# random initial guesses for charge inefficiency and wrong-type collection on the induction-plane wires

 FractUUCollect:         0.5        # fraction of charge that collects on U (non-transparency) when charge drifts over the comb holding U wires
 FractUVCollect:         0.1        # fraction of charge that collects on U (non-transparency) when charge drifts over the comb holding V wires
 FractVUCollect:         0.5        # fraction of charge that collects on V (non-transparency) when charge drifts over the comb holding U wires
 FractVVCollect:         0.1        # fraction of charge that collects on V (non-transparency) when charge drifts over the comb holding V wires
 FractUUMiss:            0.2        # fraction of charge that gets missed on U when charge drifts over the comb holding U
 FractUVMiss:            0.2        # fraction of charge that gets missed on U when charge drifts over the comb holding V
 FractVUMiss:            0.2        # fraction of charge that gets missed on V when charge drifts over the comb holding U
 FractVVMiss:            0.2        # fraction of charge that gets missed on V when charge drifts over the comb holding V
 FractZUMiss:            0.2        # fraction of charge that gets missed on Z (collection) when charge drifts over the comb holding U
 FractZVMiss:            0.2        # fraction of charge that gets missed on Z (collection) when charge drifts over the comb holding V
 FractHorizGapUMiss:     0.8        # fraction of charge in the horizontal gap that is missing on U
 FractVertGapUMiss:      0.8        # fraction of charge in the horizontal gaps that is missing on U
 FractHorizGapVMiss:     0.8        # fraction of charge in the horizontal gap that is missing on V
 FractVertGapVMiss:      0.8        # fraction of charge in the horizontal gaps that is missing on V
 FractHorizGapZMiss:     0.8        # fraction of charge in the horizontal gap that is missing on Z
 FractVertGapZMiss:      0.8        # fraction of charge in the horizontal gaps that is missing on Z
 FractHorizGapUCollect:  0.1        # fraction of charge in the horizontal gap that collects on U
 FractHorizGapVCollect:  0.1        # fraction of charge in the horizontal gap that collects on V
 FractVertGapUCollect:   0.1        # fraction of charge in the vertical gap that collects on U
 FractVertGapVCollect:   0.1        # fraction of charge in the vertical gap that collects on V
}

dunefd_simwireana:            @local::standard_simwireana
dunefd_wienerfilterana:       @local::standard_wienerfilterana


# For now treat the other dune geometries like FD

dune35t_simwire:		@local::dunefd_simwire
dune35t_simwire.PedestalOn:     true        #add pedestal value to ADC vector
dune35t_simwire.CollectionPed:  500         #ADC baseline for coll plane
dune35t_simwire.CollectionPedRMS:    0.0    #ADC baseline RMS for coll plane
dune35t_simwire.InductionPed:   1800        #ADC baseline for ind plane
dune35t_simwire.InductionPedRMS:    0.0    #ADC baseline RMS for ind plane
dune35t_simwire.CollectionCalibPed:  500         #Assumed measured value for coll plane pedestal
dune35t_simwire.CollectionCalibPedRMS:  0.0     #Assumed measured value for coll plane pedestal RMS
dune35t_simwire.InductionCalibPed:   1800        #Assumed measured value for ind plane pedestal
dune35t_simwire.InductionCalibPedRMS:   0.0        #Assumed measured value for ind plane pedestal RMS
#dune35t_simwire.CompressionType:    "none"      #no data compression for noise test

dune35t_simwire.ZeroThreshold:  5
dune35t_simwire.NoiseModel:     1 
dune35t_simwire.NoiseWidthU:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseWidthV:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseWidthZ:  2000  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseFactU:   0.1  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseFactV:   0.1 # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.NoiseFactZ:   0.1  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.LowCutoffU:    7.5  # If turn NoiseModel to 1 use these numbers..
dune35t_simwire.LowCutoffV:    7.5  # If turn NoiseModel to 1 use these numbers..    
dune35t_simwire.LowCutoffZ:    7.5  # If turn NoiseModel to 1 use these numbers..    
dune35t_simwire.SimStuckBits:    false   # Simulate stuck bits
dune35t_simwireana:             @local::dunefd_simwireana
dune35t_wienerfilterana:        @local::dunefd_wienerfilterana
dune35t_simwire.module_type:    "SimWireDUNE35t"

dune35t_simcounter:
{
    module_type:           "SimCounter35t"
    LArGeantModuleLabel:   "largeant"
    MakeTree:              false
    BSUTriggerThreshold:   0.5 # MeV
    TSUTriggerThreshold:   0.25 # MeV
    TriggerEfficiency:     1.0
    ClockSpeedCounter:     31.25 # MHz
    CombinedTimeDelay:     160 # ns. cable length delay + various electronics delays
}

END_PROLOG
