#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "lightsource_dune.fcl"


process_name: LibraryBuild


services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "PhotonLibraryFile_dunefd.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
                @table::dunefd_simulation_services
}

# Use the build pset, with BuildLibraryFile set to true. Don't use the
# cryo boundary since each cryostat is divided into 3 sections for 10kt
services.PhotonVisibilityService: @local::standard_photonvisibilityservice_buildlib
services.PhotonVisibilityService.UseCryoBoundary: false

# UseCryoBoundary is set to false, so use the following parameters.
# For now, set equal to first APA yz-slice, will need adjustment
services.PhotonVisibilityService.XMin: -1597.11 
services.PhotonVisibilityService.XMax: -1121.12
services.PhotonVisibilityService.YMin: -702.5
services.PhotonVisibilityService.YMax:  702.5
services.PhotonVisibilityService.ZMin: -0.75
services.PhotonVisibilityService.ZMax:  2534.25

# Number of voxels, will need adjustment
# The following are the uB numbers for now
services.PhotonVisibilityService.NX: 75
services.PhotonVisibilityService.NY: 75
services.PhotonVisibilityService.NZ: 400


services.LArFFT: ""

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   2           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{

 producers:
 {
   generator: @local::dunefd_lightsource	  
   largeant:  @local::dunefd_largeant	  
 }

 analyzers:
 {
   pmtresponse: @local::dunefd_simphotoncounter
 }

 simulate: [ generator, largeant ] 
 analyzeIt:  [ pmtresponse ]
 stream1:  [ ]

 trigger_paths: [simulate] 

 end_paths:     [analyzeIt, stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_dunefd_build.root" #default file name, can override from command line with -o or --output
 }
}

# Begin optical specific parts:

# set quantum efficiency supressed scint yield to 0.03 * 24000 
services.LArPropertiesService.ScintYield: 72

# enable optical physics in LArG4
services.LArG4Parameters.EnabledPhysics: [ "Em", 
						"Optical", 
						"SynchrotronAndGN", 
						"Ion", 
						"Hadron", 
						"Decay", 
						"HadronElastic", 
						"Stopping", 
						"NeutronTrackingCut" ]

# enable this custom physics list
services.LArG4Parameters.UseCustomPhysics: true

# do not allow lightsource to write output into root file
physics.producers.generator.FillTree: false


physics.analyzers.pmtresponse.MakeAllPhotonsTree: false
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: false
physics.analyzers.pmtresponse.MakeSimPhotonssTree: false
physics.analyzers.pmtresponse.MakeEventsTree: false
